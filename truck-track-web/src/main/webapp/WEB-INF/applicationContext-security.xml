<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
			http://www.springframework.org/schema/security 
			http://www.springframework.org/schema/security/spring-security-3.1.xsd">
    
    <security:http pattern="/styles/**" security="none"/>
    <security:http pattern="/tags/**" security="none"/>
    <security:http pattern="/templates/**" security="none"/>
    <security:http pattern="/views/**" security="none"/>
    <security:http pattern="/auth/**" security="none"/>
    <security:http pattern="/register/**" security="none"/>
    
    <!-- HTTP security configurations -->
    <security:http auto-config="false" use-expressions="true">
        
        <security:form-login 
        	login-page="/auth/login" 
        	authentication-failure-url="/auth/failure"
        	default-target-url="/" />
                
        <security:logout 
			invalidate-session="true" 
			logout-success-url="/auth/login" 
			logout-url="/auth/logout"/>
        
		<security:intercept-url pattern="/cargo/**" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/customer/**" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/vehicle/**" access="hasRole('ROLE_USER')"/>
        
    </security:http>
        
	<!-- Declare an authentication-manager to use a custom userDetailsService -->
	<security:authentication-manager>
        <security:authentication-provider user-service-ref="authUserService">
        	<security:password-encoder ref="passwordEncoder" />
        </security:authentication-provider>
	</security:authentication-manager>

	<bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder">
		<constructor-arg value="1" />
	</bean>

	<!-- A custom service where Spring will retrieve users and their corresponding access levels  -->
	<bean id="authUserService" class="com.trucktrack.core.authuser.AuthUserService">
		<property name="userDAO" ref="userDAO" />
	</bean>
    
</beans>